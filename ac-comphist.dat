((("tuple" .
   [1 0 0 0 0])
  ("help" .
   [1 0 0 0])
  ("etc" .
   [1 0 0])
  ("is_positive" .
   [1 0 0 0 0 0 0 0 0 0 0])
  ("return_bigger" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("is_ten" .
   [1 0 0 0 0 0])
  ("self" .
   [5 0 0 0])
  ("smaller_than_ten" .
   [0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0])
  ("bigger_than_ten" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("challenges" .
   [0 0 0 0 0 1 5 4 1 0])
  ("assertEqual" .
   [9 0 0 1 0 0 0 0 0 0 1])
  ("margin-spaces?" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("levels?" .
   [0 0 0 0 0 0 1])
  ("hiccup.core" .
   [0 0 0 0 0 0 0 1 0 0 0])
  ("hiccup" .
   [3 0 0 0 1 0])
  ("win-loss-print" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 1])
  ("wins-losses" .
   [0 0 0 0 0 0 0 0 1 1 0])
  ("chocolates->winnable" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("r3" .
   [4 0])
  ("r2" .
   [11 0])
  ("r1" .
   [11 0])
  ("winnable3" .
   [1 0 0 0 0 0 0 0 0])
  ("winnable1" .
   [0 0 0 0 1 4 1 0 0])
  ("chocolate" .
   [1 0 0 0 0 0 0 0 0])
  ("winnable?" .
   [3 0 0 1 1 6 0 1 1])
  ("chocolates" .
   [2 0 0 0 0 6 3 0 0 1])
  ("dotimes" .
   [1 0 0 0 0 0 0])
  ("tweet-text" .
   [0 0 0 0 1 0 0 0 0 0])
  ("end-at-last-punctuation" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("prefix-list" .
   [0 0 0 0 0 0 2 0 0 0 0])
  ("functional-leary" .
   [0 0 0 1 0 0 0 0 0 2 0 0 0 0 0 0])
  ("the" .
   [1 0 0])
  ("On" .
   [1 0])
  ("clojure.set/union" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0])
  ("functional-programming.txt" .
   [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("process-file" .
   [0 0 0 0 0 2 0 0 0 0 0 0])
  ("generate-text" .
   [0 0 0 0 1 1 0 1 1 0 0 0 0])
  ("fname" .
   [1 0 0 0 0])
  ("clojure.java.io/resource" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0])
  ("text->word-chain" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("result-text" .
   [0 0 0 0 0 0 0 0 0 1 0])
  ("result-chain" .
   [0 0 0 0 0 0 0 0 0 1 0 0])
  ("word-chain" .
   [0 0 0 1 0 0 0 0 0 0])
  ("start-phrase" .
   [0 0 0 0 0 1 0 0 0 0 0 0])
  ("word-transitions" .
   [0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0])
  ("partition-all" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("words" .
   [2 0 0 0 1])
  ("example" .
   [0 0 0 0 1 1 0])
  ("common-check" .
   [0 0 0 0 0 0 2 0 0 0 0 0])
  ("pre-check" .
   [0 0 0 0 0 0 1 0 0])
  ("faith" .
   [1 0 0 0 0])
  (":else" .
   [6 0 0 0 0])
  ("right?" .
   [0 0 0 0 0 1])
  ("left?" .
   [1 0 0 0 0])
  ("central?" .
   [0 0 0 1 0 0 0 1])
  ("zero?" .
   [0 0 0 0 2])
  ("right-drop-primes?" .
   [0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0])
  ("left-drop-primes?" .
   [0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0])
  ("subs-primes?" .
   [0 0 0 0 0 0 0 1 0 1 0 0])
  ("after-drop" .
   [0 0 0 0 0 3 0 0 0 0])
  ("rest" .
   [4 0 0 0])
  ("drop-last" .
   [1 0 0 0 1 0 0 0 0])
  ("id" .
   [21 0])
  (".contains" .
   [0 0 0 0 0 0 1 0 0])
  ("zero-digit?" .
   [0 0 0 0 0 0 0 2 0 0 0])
  ("contains-zero-digit?" .
   [0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0])
  ("prime?" .
   [1 0 0 0 4 3])
  ("str->int" .
   [2 0 0 0 2 7 1 0])
  ("visited" .
   [1 0 0 0 0 0 0])
  ("other-conn-cities" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0])
  ("next-city" .
   [1 0 0 0 0 0 0 0 0])
  ("relevant-connected-cities" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("other-next-city" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("inc-values" .
   [0 0 0 0 0 0 0 1 0 0])
  ("explore-tree" .
   [0 0 0 0 0 0 0 1 0 0 0 0])
  ("nodes->leaf-cities" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("clojure.pprint/pprint" .
   [2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0])
  ("init-nodes->leaf-city" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("dec-values" .
   [1 0 0 0 0 0 0 0 1 1])
  ("value-at-pos" .
   [0 0 0 0 0 2 0 0 0 0 0 0])
  ("f" .
   [1])
  ("recur" .
   [5 0 0 0 0])
  ("factorial" .
   [5 0 0 0 0 0 0 1 0])
  ("pascals-triangle" .
   [0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0])
  ("fibonacci" .
   [0 0 0 0 0 1 0 0 0])
  ("@port" .
   [1 0 0 0 0])
  ("port-listener" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("available-bytes" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  (".availableProcessors" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("last-recieved-msg" .
   [1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("recieved-messages" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0])
  (":private" .
   [1 0 0 0 0 0 0 0])
  ("set-volt" .
   [1 0 0 0 0 0 0 0])
  ("false?" .
   [0 0 1 0 0 1])
  ("true?" .
   [0 0 0 0 8])
  ("remote-mode" .
   [1 0 0 0 0 0 0 0 0 0 0])
  ("curr" .
   [1 0 0 0])
  ("set-curr" .
   [2 0 0 0 0 0 0 0])
  ("volt" .
   [1 0 0 0])
  ("build-message" .
   [0 0 0 0 1 1 0 0 0 0 0 0 0])
  ("util/get-crc" .
   [0 0 0 0 0 0 0 0 1 0 0 0])
  (":current" .
   [1 0 0 0 0 0 0 0])
  ("@nominal-values" .
   [0 0 0 0 0 0 0 0 2 0 0 0 0 0 0])
  (":voltage" .
   [1 0 0 0 0 0 0 0])
  (":volt" .
   [2 0 0 0 0])
  ("util/calculate-percentage" .
   [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("msg-no-crc" .
   [2 0 0 0 0 0 2 0 0 0])
  ("0xF4" .
   [1 0 0 0])
  ("0x06" .
   [2 0 0 0])
  ("typ" .
   [2 0 0])
  ("msg-prefix" .
   [1 0 0 0 0 0 0 0 0 2])
  ("output-on" .
   [0 0 0 0 1 0 0 0 0])
  ("get-last-reply" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0])
  (":get-nominal-curr" .
   [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("get-nominal-current" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0])
  ("map-url-structure" .
   [0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0])
  ("directory-structure" .
   [0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0])
  ("build-branch" .
   [1 0 0 0 0 0 1 0 0 0 0 0])
  ("branch" .
   [1 0 0 0 0 0])
  ("next-next-dirs" .
   [0 0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("path" .
   [3 0 0 0])
  (".endsWith" .
   [0 0 0 0 0 1 0 0 0])
  ("one-level-under" .
   [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0])
  ("dir-content" .
   [1 0 0 0 0 0 0 0 0 0 0])
  ("urls" .
   [4 0 0 0])
  ("account" .
   [1 0 0 0 0 0 0])
  ("all-that-start-with" .
   [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0])
  ("start-str" .
   [2 0 0 0 0 2 0 0 0])
  ("empty?" .
   [1 0 0 0 0 0])
  ("tree" .
   [13 0 0 0])
  ("dir" .
   [7 0 0])
  ("remaining-dirs" .
   [0 0 0 0 1 1 0 1 1 2 0 0 0 0])
  ("re-matcher" .
   [0 0 0 0 1 0 0 0 0 0])
  ("build-tree" .
   [6 0 1 0 0 4 0 0 0 0])
  ("next-dirs" .
   [7 0 0 0 0 1 1 0 0])
  ("content-dirs" .
   [1 0 0 0 0 3 0 2 0 0 0 0])
  ("split-to-dirs" .
   [0 0 0 0 0 0 0 0 1 0 0 0 0])
  ("pprint" .
   [8 0 0 0 0 0])
  ("re-pattern" .
   [1 0 0 1 0 1 0 0 0 0])
  ("remove-root" .
   [1 0 0 0 0 0 0 0 0 0 0])
  ("clojure.string/replace" .
   [3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0])
  ("//?" .
   [0 0 1])
  ("clojure.string/split" .
   [5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 3 2])
  ("doc" .
   [3 0 0])
  ("split-at" .
   [1 0 0 0 0 2 0 0])
  ("link" .
   [1 0 0 0])
  ("@unique-urls" .
   [0 0 0 0 3 0 2 5 0 0 0 0])
  ("newline" .
   [0 0 0 1 0 0 0])
  ("fetch-url" .
   [0 0 0 0 1 1 0 0 0])
  ("filter" .
   [2 0 0 0 0 0])
  ("@site-tree" .
   [0 1 0 0 0 1 0 0 0 0])
  ("site-tree" .
   [1 0 0 0 0 0 0 0 0])
  ("reset!" .
   [2 0 0 0 0 1])
  ("atom" .
   [2 0 0 1])
  ("clojure.tools.reader" .
   [0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("current-root" .
   [1 0 0 0 1 1 1 1 0 0 0 0])
  ("pmap" .
   [0 0 0 1])
  ("new-links" .
   [7 0 0 0 0 0 0 0 0])
  ("new-link?" .
   [0 0 0 0 0 0 0 1 1])
  ("in?" .
   [4 0 0])
  ("unique-urls" .
   [2 0 0 3 0 0 0 0 0 0 0])
  ("->" .
   [4 0])
  ("empty" .
   [0 0 0 2 0])
  ("links" .
   [5 0 0 0 0])
  ("explore-branch" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("links-on-page" .
   [0 0 0 0 0 1 0 0 2 0 0 0 0])
  ("create-tree-of-site" .
   [0 0 0 0 0 0 0 0 0 0 1 3 0 0 1 0 0 0 0])
  ("root" .
   [4 0 0 0])
  ("root-url-en" .
   [14 0 0 0 0 0 0 0 0 3 0])
  ("build-full-paths" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  ("url-or-urn" .
   [0 0 0 3 0 0 0 0 0 0])
  ("url" .
   [7 0 0])
  ("root-url" .
   [2 0 0 1 10 1 0 1])
  ("list-links" .
   [1 0 0 0 0 0 0 0 0 0])
  ("return" .
   [1 0 0 0 0 0])
  ("send-message-to-ps" .
   [0 0 0 0 0 0 0 0 0 0 0 1 4 0 0 0 0 0])
  ("ttyACM0" .
   [1 0 0 0 0 0 0])
  ("net.cgrand.enlive-html" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("connection-open?" .
   [1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0])
  ("serial-connection" .
   [0 0 0 0 0 0 0 0 0 0 1 3 0 1 1 0 0])
  ("com-name" .
   [1 0 0 0 0 0 0 0])
  ("serial.util/list-ports" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("serial.core/open" .
   [0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("com-nr" .
   [2 0 0 0 0 0])
  ("0xFF" .
   [1 0 0 0])
  ("bit-and" .
   [1 0 0 0 0 0 1])
  ("bees" .
   [1 0 0 0])
  ("aset-byte" .
   [0 0 0 0 0 0 0 1 0])
  ("rand" .
   [0 0 0 1])
  ("for" .
   [1 0 0])
  ("second" .
   [1 0 0 0 0 0])
  ("first" .
   [7 0 0 0 0])
  ("map" .
   [7 0 0])
  ("byte-array" .
   [3 0 0 0 0 0 0 0 0 0])
  ("percentage-value" .
   [0 0 0 0 0 0 3 0 0 0 1 0 0 0 0 0])
  ("0xCCCC" .
   [1 0 0 0 0 0])
  ("Double" .
   [1 0 0 0 0 0])
  ("double" .
   [2 0 0 0 0 0])
  ("long" .
   [1 0 0 0])
  ("float" .
   [4 0 0 1 0])
  ("value" .
   [2 0 0 0 0])
  ("connection" .
   [1 0 0 0 0 0 0 0 0 0])
  ("char" .
   [2 0 0 0])
  ("str" .
   [10 0 0])
  ("nil" .
   [13 0 0])
  ("serial.util" .
   [0 0 0 0 0 0 0 1 0 0 0])
  ("serial.core" .
   [0 0 0 1 0 1 4 1 0 0 0])
  (":require" .
   [4 0 0 0 0 0 2 0])
  ("int" .
   [0 0 1])
  ("calculate-percentage" .
   [1 0 0 1 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("message" .
   [3 0 0 0 0 0 0])
  ("digest/crc16-modbus" .
   [0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("digest" .
   [0 0 0 0 0 2])
  ("biscuit.core" .
   [0 0 0 0 0 1 0 0 0 0 0 0])
  ("require" .
   [0 0 0 0 0 1 0])
  ("byte2" .
   [2 0 0 0 0])
  ("byte1" .
   [2 0 0 0 0])
  ("0x01" .
   [6 0 0 0])
  ("0x00" .
   [5 0 0 1])
  ("bit-shift-left" .
   [1 0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("bit-shift-right" .
   [0 0 0 0 0 0 0 2 0 3 0 0 0 0 0])
  ("percent-value" .
   [0 0 0 0 0 3 1 0 0 0 0 0 0])
  ("percent-value-fractal" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0])
  ("nominal-value" .
   [3 0 0 0 0 0 1 2 0 0 0 0 0])
  ("fractal-part" .
   [0 0 0 1 0 1 0 1 0 0 0 0])
  ("percent-value-integer" .
   [0 0 1 1 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("nominal-voltage" .
   [1 0 0 0 0 0 0 2 0 0 0 0 0 0 0])
  ("integer-part" .
   [1 0 0 0 0 0 0 1 1 0 0 0])
  ("hundred-percent" .
   [0 0 0 2 0 1 3 0 0 0 0 0 0 0 0])
  ("set-volt-msg" .
   [0 0 0 0 1 0 0 0 0 0 0 0])
  ("end" .
   [1 0 0])
  ("now" .
   [1 0 0])
  ("add-ten" .
   [2 0 0 0 1 1 0])
  ("doseq" .
   [0 0 0 0 1])
  ("my-map" .
   [2 0 0 0 0 0])
  ("Thread/sleep" .
   [1 0 0 0 0 0 0 1 0 0 0 0])
  ("Thread" .
   [0 0 0 0 1 0])
  ("do" .
   [21 0])
  ("multiply-by-5" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("complement" .
   [0 0 0 0 0 2 5 0 1 1])
  ("display-line" .
   [0 0 0 0 0 0 1 0 0 0 0 0])
  (":div#block" .
   [1 0 0 0 0 0 0 0 0 0])
  (":div" .
   [8 0 0 0])
  (":h1" .
   [2 0 0])
  ("binary-clock-display" .
   [0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("my-mini-component" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  (":li" .
   [2 0 0])
  ("divisible-by" .
   [0 0 0 0 1 0 0 0 0 2 0 0])
  ("simpleton" .
   [0 0 0 1 0 0 1 0 0])
  ("simple-component" .
   [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("def" .
   [31 0 0])
  ("js/Date." .
   [0 0 0 1 0 1 0 0])
  (":class" .
   [1 0 0 0 0 0])
  ("if" .
   [14 0])
  ("bit" .
   [2 0 0])
  (":refer" .
   [2 0 0 0 0 0])
  ("bit-test" .
   [0 0 0 1 1 2 0 1])
  ("column-nr" .
   [1 0 0 0 0 0 0 0 0])
  ("bit-nr" .
   [1 0 0 0 0 0])
  ("column" .
   [5 0 0 1 0 0])
  ("cell" .
   [5 0 0 0])
  ("bit-arr" .
   [0 0 0 0 0 0 1])
  ("date" .
   [3 0 0 0])
  ("quot" .
   [0 0 0 1])
  ("digit" .
   [4 0 0 0 0])
  ("clock-state" .
   [0 0 0 0 0 1 0 0 0 0 0])
  (":div#cell" .
   [1 0 0 0 0 0 0 0 0])
  ("start" .
   [8 0 0 0 0])
  ("street-address" .
   [1 0 0 0 0 2 2 0 0 0 0 0 0 0])
  ("city" .
   [1 0 0 0])
  ("state" .
   [2 0 0 0 0])
  ("first-name" .
   [4 0 0 0 0 0 0 1 0 0])
  (":street-address" .
   [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  (":city" .
   [1 0 0 0 0])
  (":state" .
   [2 0 0 0 0 0])
  ("test-address" .
   [1 0 0 0 0 0 0 0 0 0 0 0])
  ("address" .
   [1 0 0 0 0 0 0])
  ("clojure.string" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 3])
  ("clojure.string/join" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("last-name" .
   [3 0 0 0 0 0 0 0 0])
  ("partition" .
   [4 0 0 0 0 0 1 1 1])
  (":d" .
   [4 0])
  (":e" .
   [2 0])
  (":c" .
   [3 0])
  (":a" .
   [8 0])
  (":b" .
   [7 0])
  ("time-to-binary-fromat" .
   [0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("new" .
   [4 0 0])
  ("java.util.Date" .
   [0 0 0 0 0 0 0 0 0 0 0 0 2 0])
  ("subs" .
   [0 0 0 1])
  ("date-time" .
   [3 0 0 0 0 0 0 0 0])
  ("hour" .
   [1 0 0 1])
  (".getHour" .
   [1 0 0 0 0 0 0 0])
  ("split-into-digits" .
   [0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0])
  ("dt" .
   [2 0])
  ("value-pair" .
   [0 0 0 0 0 1 0 0 0 0])
  ("value-pairs" .
   [0 0 0 0 0 3 1 0 0 0 0])
  (":hour" .
   [2 0 0 0 0])
  (":minutes" .
   [5 0 0 0 0 0 0 0])
  ("time" .
   [2 0 0 0])
  ("dec-to-bin" .
   [3 0 0 0 2 0 12 4 0 0])
  ("decimal" .
   [8 0 0 0 0 1 0])
  ("swap!" .
   [1 0 2 1 1])
  ("decimal-atom" .
   [1 0 0 0 0 0 0 2 0 0 0 0])
  ("@decimal-atom" .
   [2 0 0 0 0 0 0 1 1 0 0 0 0])
  ("rep" .
   [2 0 0])
  ("bit-vals" .
   [3 0 0 0 0 0 0 0])
  ("bit-val" .
   [1 0 0 0 0 0 0])
  ("bit-pos" .
   [1 0 0 0 0 0 0])
  (">=" .
   [5 0])
  ("reverse" .
   [0 0 0 0 1 0 0])
  ("range" .
   [12 0 0 0 0])
  ("time-to-map" .
   [2 0 0 0 0 0 0 0 0 0 0])
  ("matrix" .
   [26 0 0 0 0 0])
  (":minute" .
   [1 0 0 0 0 0 0])
  (":second" .
   [2 0 0 0 0 0 0])
  (":seconds" .
   [4 0 0 0 0 0 0 0])
  (":hours" .
   [4 0 0 0 0 0])
  ("get-time" .
   [6 0 0 0 0 0 0 0])
  ("apply" .
   [19 0 0 0 1])
  (":first-digit" .
   [1 0 0 0 0 0 0 0 0 0 0 0])
  (":second-digit" .
   [3 0 0 0 0 0 0 0 0 0 0 0 0])
  ("main" .
   [2 0 0 1])
  ("first-digits" .
   [0 0 0 0 0 0 0 0 1 1 0 0])
  ("second-digit" .
   [0 0 0 0 0 0 0 1 0 0 0 0])
  ("fd" .
   [2 0])
  ("sd" .
   [1 0])
  ("second-digits" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("digits" .
   [5 0 0 0 0 0])
  ("display" .
   [2 0 0 0 0 0 0])
  ("println" .
   [5 0 0 1 2 0 0])
  ("hfd" .
   [1 0 0])
  (":as" .
   [15 0 0])
  ("cons" .
   [0 0 0 1])
  ("comp" .
   [0 0 2 0])
  ("time-vecs" .
   [1 0 0 0 0 0 0 0 0])
  ("print-vec" .
   [1 0 0 0 0 0 0 0 0])
  ("in-bin" .
   [1 0 0 0 0 0])
  ("in-binary" .
   [2 0 0 0 0 0 0 0 0])
  ("conj" .
   [4 0 0 1])
  ("turned-around" .
   [0 0 0 0 1 1 0 0 0 0 0 0 0])
  ("print-matrix" .
   [1 0 0 0 0 0 0 0 0 0 0 0])
  ("list-of-digits" .
   [0 0 0 0 0 0 0 1 0 0 1 0 0 0])
  ("row" .
   [13 0 0])
  ("doall" .
   [3 0 1 1 0])
  ("rows" .
   [5 0 0 0])
  ("nill" .
   [1 0 0 0])
  ("face" .
   [1 0 0 0])
  ("concat" .
   [0 0 0 0 1 0])
  ("flatten" .
   [0 0 0 0 0 1 0])
  ("test" .
   [1 0 0 0])
  ("serial.core/write" .
   [2 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0])
  ("connect-to-com" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("predefined-messages" .
   [0 0 0 0 0 2 6 2 1 2 1 0 0 0 0 0 0 0 0])
  (":output-on" .
   [0 0 0 0 2 4 0 1 0 0])
  ("msg" .
   [6 0 0])
  ("on?" .
   [4 0 0])
  ("send-msg" .
   [0 0 0 0 0 0 1 0])
  ("send-msg-to-ps" .
   [0 0 0 0 0 2 0 0 4 0 0 3 0 0])
  (":output-off" .
   [3 0 0 0 0 0 0 0 0 0 0])
  ("set-output" .
   [1 0 0 0 0 0 1 1 0 0])
  (":remote-on" .
   [0 0 0 0 0 1 0 0 0 0])
  ("remote-mode-on" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  (":remote-off" .
   [1 0 0 0 0 0 0 0 0 0 0])
  (":get-nominal-volt" .
   [0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0])
  ("get-nominal-volt" .
   [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0])
  ("serial.core/close" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0])
  ("serial.core/listen" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0])
  ("incoming-messages" .
   [0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0])
  (".read" .
   [2 0 0 0 0])
  ("input-stream" .
   [1 0 0 0 0 2 0 0 0 0 0 1])
  ("incoming-message-handler" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("safe-run" .
   [0 0 0 0 0 0 0 1])
  (":links" .
   [1 0 0 0 0 0])
  ("html" .
   [1 0 0 0])
  ("type" .
   [1 0 0 0])
  ("modbus-protocol.messages" .
   [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("one-hundred-percent" .
   [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("0x02" .
   [3 0 0 0])
  ("0x03" .
   [1 0 0 0])
  ("byte-arr-to-str" .
   [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("str-to-byte-arr" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("deftest" .
   [2 0 0 0 0 1 0])
  ("is" .
   [1 0])
  ("get-crc" .
   [1 0 0 0 0 0 0])
  ("in-bondora-en?" .
   [0 0 0 0 0 0 0 0 0 1 0 0 1 0])
  ("get-href" .
   [1 0 0 0 0 0 0 0])
  ("urn" .
   [2 0 0])
  (".startsWith" .
   [1 0 0 0 0 0 0 1 2 0 0])
  ("en" .
   [1 0])
  ("English" .
   [0 0 0 0 0 0 1])
  ("remove-query-string" .
   [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("collect-unique-urls" .
   [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  ("count-occurences" .
   [1 0 0 0 0 0 0 0 0 0 1 0 1 1 0 0])
  ("count-occurences-of-words" .
   [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("count" .
   [4 0 0 0 1])
  ("re-seq" .
   [1 0 0 0 0 0])
  ("txt" .
   [3 0 0])
  ("count-occ" .
   [1 0 0 0 0 0 0 1 0])
  ("loan" .
   [1 0 0 0])
  ("Invest" .
   [0 0 0 0 0 1])
  ("text" .
   [2 0 0 0])
  ("nr-of-elements" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("elements" .
   [1 0 0 0 0 0 0 0])
  ("clojure-getting-started" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("clojure-getting-started.web" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0])
  ("append" .
   [1 0 0 0 0 0])
  ("integers" .
   [1 0 0 0 0 0 0 0])
  ("nrs" .
   [0 0 1])
  ("sub_text" .
   [0 0 0 0 0 0 1 0])
  ("contents" .
   [1 0 0 0 0 0 0 1])
  ("get_hours" .
   [1 0 0 0 0 0 0 0 0])
  ("account_for_units" .
   [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("step" .
   [1 0 0 0])
  ("gcd" .
   [2 0 0])
  ("sequence" .
   [0 0 0 0 2 0 0 0])
  ("divisors" .
   [0 0 0 0 0 0 1 1])
  ("divisors-l" .
   [0 0 0 0 0 3 1 0 0 0])
  ("gcd-" .
   [3 0 0 0])
  ("clojure.set" .
   [0 0 0 0 0 0 0 0 0 0 1])
  ("clojure.set/intersection" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("divisors-m" .
   [1 0 0 0 0 0 0 0 0 0])
  ("memoize" .
   [0 0 0 1 0 3 0])
  ("acc" .
   [3 0 0])
  ("curr-val" .
   [2 0 0 0 0 0 0 0])
  ("new-acc" .
   [3 0 0 0 0 0 0])
  (":value" .
   [2 0 0 0 0 0])
  ("speech-synthesis.say" .
   [0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("speech-recognition.hear" .
   [0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("hear" .
   [1 0 0 0])
  ("say" .
   [2 0 0])
  ("say/say" .
   [12 0 0 0 1 2 2])
  ("hear/hear" .
   [4 0 0 0 0 1 0 0 0])
  ("in" .
   [1 0])
  ("lol" .
   [2 0 0])
  ("tree-seq" .
   [0 0 0 0 1 0 0 0])
  ("clojure.pprint" .
   [0 0 0 0 0 0 0 0 0 0 2 1 0 0])
  ("identity" .
   [1 0 0 0 4 5 1 1])
  ("Well" .
   [3 0 0 0])
  ("Trololololololol" .
   [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("fuck" .
   [4 0 0 0])
  ("asshole" .
   [2 0 0 0 0 0 0])
  ("Kristo" .
   [5 0 0 0 0 0])
  ("Bitch" .
   [1 0 0 0 0])
  ("off" .
   [2 0 0])
  ("crazy" .
   [1 0 0 0 0])
  ("my" .
   [1 0])
  ("man" .
   [1 0 0])
  ("will" .
   [3 0 0 0])
  ("Fuck" .
   [1 0 0 0])
  ("love" .
   [1 0 0 0])
  ("am" .
   [1 0])
  ("you" .
   [4 0 0])
  ("ever" .
   [1 0 0 0])
  ("m" .
   [1])
  ("You" .
   [1 0 0])
  ("bitch" .
   [5 0 0 0 0])
  ("not" .
   [8 0 0])
  ("black" .
   [1 0 0 0 0])
  ("like" .
   [1 0 0 0])
  ("digital" .
   [1 0 0 0 0 0 0])
  ("Yeah" .
   [1 0 0 0])
  ("don" .
   [1 0 0])
  ("to" .
   [1 0])
  ("your" .
   [2 0 0 0])
  ("coke" .
   [1 0 0 0])
  ("ass" .
   [2 0 0])
  ("too" .
   [1 0 0])
  ("repeat" .
   [2 0 0 0 0 0])
  (".toLowerCase" .
   [0 0 0 0 0 0 0 1 0 0 0 0])
  ("end2" .
   [1 0 0 0])
  ("get-input" .
   [3 0 0 0 0 0 0 0 0])
  ("prefix" .
   [7 0 0 0 0 0])
  ("suffix" .
   [3 0 0 0 0 0])
  ("new-prefix" .
   [0 0 0 0 0 0 0 0 0 1])
  ("results" .
   [1 0 0 1 1 2 0])
  ("suffixes" .
   [2 0 0 0 0 0 0 0])
  ("shuffle" .
   [4 0 0 0 0 0 0])
  ("testing" .
   [2 0 0 0 0 0 0])
  ("with-redefs" .
   [0 0 0 0 0 0 0 0 0 1 1])
  ("walk-chain" .
   [0 0 0 0 2 0 0 0 0 0])
  ("chain" .
   [4 0 0 0 0])
  ("chain->text" .
   [1 0 0 0 0 2 0 0 0 0 0])
  ("results-with-spaces" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("results-char-count" .
   [0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("suffix-char-count" .
   [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("new-results-char-count" .
   [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0])
  ("lst-size" .
   [1 0 0 0 0 0 0 0])
  ("lst" .
   [2 0 0])
  ("gcd-of-list" .
   [0 0 0 1 1 0 0 0 0 0 0])
  ("Math/pow" .
   [1 0 0 0 0 0 0 0])
  ("raise" .
   [3 0 0 0 0])
  ("pair" .
   [2 0 0 0])
  ("part-inp" .
   [0 0 0 0 0 1 0 2])
  (":bases" .
   [1 0 0 0 0 0])
  ("bases" .
   [0 0 0 0 1])
  ("pwrs" .
   [1 0 0 0])
  ("moves" .
   [1 0 0 1 1])
  ("space" .
   [4 0 0 0 0])
  ("game" .
   [1 0 0 0])
  ("every?" .
   [5 0 0 0 2 4])
  (":while" .
   [1 0 0 0 0 0])
  (":when" .
   [2 0 0 0 0])
  ("or" .
   [2 0])
  ("inc" .
   [5 0 0])
  ("and" .
   [3 0 0])
  ("<=" .
   [2 0])
  ("nil?" .
   [1 0 0 0])
  (":let" .
   [2 0 0 0])
  ("max-size" .
   [0 0 0 0 0 1 2 0])
  ("memo-game" .
   [1 0 0 0 0 0 0 1 0])
  ("merge" .
   [2 0 0 0 0])
  ("get" .
   [1 0 0])
  (":else-params" .
   [0 0 0 0 0 1 0 0 0 0 0 0])
  ("take" .
   [1 0 0 0])
  ("row1" .
   [17 0 3 0])
  ("row2" .
   [15 0 0 0])
  ("row3" .
   [3 0 0 0])
  ("isWin" .
   [1 0 0 0 0])
  ("flag1" .
   [2 0 0 0 0])
  ("flag3" .
   [1 0 0 0 0])
  ("win" .
   [2 0 0])
  ("col" .
   [3 0 0])
  ("r0" .
   [2 0])
  ("row-nr" .
   [2 0 2 4 3 2])
  ("col-nr" .
   [3 0 0 6 2 1])
  ("size" .
   [4 0 1 2])
  ("inside?" .
   [0 0 0 0 0 1 0])
  ("row0" .
   [14 0 0 0])
  ("bitter?" .
   [0 0 0 0 1 1 1])
  ("min" .
   [1 0 0])
  ("c" .
   [1])
  ("new-row" .
   [0 0 0 0 0 0 1])
  ("new-row1" .
   [1 0 0 0 3 1 1 0])
  ("new-row2" .
   [3 0 0 0 0 0 0 1])
  ("new-row0" .
   [0 0 0 0 0 0 3 0])
  ("fill-chocolate-table" .
   [0 0 0 0 5 2 0 0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("rules" .
   [0 0 0 0 1])
  ("inc-choco" .
   [0 0 0 1 1 0 0 0 0])
  ("next-choco-dim" .
   [1 0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("take-nth" .
   [0 0 0 0 0 1 0 0])
  ("mixs" .
   [2 0 0 0])
  ("trues" .
   [2 0 0 0 0])
  ("falses" .
   [2 0 0 0 0 0])
  ("set!" .
   [1 0 0 0])
  ("defn" .
   [0 0 1 0])
  ("clojure.java.jdbc" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0])
  ("shouter.models.shout" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0])
  ("sql/query" .
   [1 0 0 0 0 0 0 0 0])
  (":count" .
   [2 0 0 0 0 0])
  ("migrated?" .
   [0 0 0 0 0 1 0 1 1])
  ("sql/db-do-commands" .
   [0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("shout/spec" .
   [2 0 0 0 0 0 3 0 0 0])
  ("sql/create-table-ddl" .
   [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0])
  (":id" .
   [1 0 0])
  (":body" .
   [1 0 0 0 0])
  ("shouts" .
   [1 0 0 0 0 0])
  ("desc" .
   [1 0 0 0])
  ("defquery" .
   [0 0 0 0 0 1 1 1])
  ("yesql.core" .
   [0 0 0 0 0 0 0 0 1 0])
  ("is-migrated" .
   [0 0 0 0 0 2 0 0 0 0 0])
  ("migrate" .
   [2 0 0 0 0 0 1])
  ("create-shouts-table" .
   [0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("shout-form" .
   [0 0 0 0 0 0 0 0 0 1])
  ("om/root" .
   [0 0 0 1 0 0 0])))
