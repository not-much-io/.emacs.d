((("value-at-pos" .
   [0 0 0 0 0 2 0 0 0 0 0 0])
  ("f" .
   [1])
  ("recur" .
   [1 0 0 0 0])
  ("factorial" .
   [5 0 0 0 0 0 0 1 0])
  ("pascals-triangle" .
   [0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0])
  ("fibonacci" .
   [0 0 0 0 0 1 0 0 0])
  ("@port" .
   [1 0 0 0 0])
  ("port-listener" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("available-bytes" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  (".availableProcessors" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("last-recieved-msg" .
   [1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("recieved-messages" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0])
  (":private" .
   [1 0 0 0 0 0 0 0])
  ("set-volt" .
   [1 0 0 0 0 0 0 0])
  ("false?" .
   [0 0 0 0 0 1])
  ("true?" .
   [0 0 0 0 2])
  ("remote-mode" .
   [1 0 0 0 0 0 0 0 0 0 0])
  ("curr" .
   [1 0 0 0])
  ("set-curr" .
   [2 0 0 0 0 0 0 0])
  ("volt" .
   [1 0 0 0])
  ("build-message" .
   [0 0 0 0 1 1 0 0 0 0 0 0 0])
  ("util/get-crc" .
   [0 0 0 0 0 0 0 0 1 0 0 0])
  (":current" .
   [1 0 0 0 0 0 0 0])
  ("@nominal-values" .
   [0 0 0 0 0 0 0 0 2 0 0 0 0 0 0])
  (":voltage" .
   [1 0 0 0 0 0 0 0])
  (":volt" .
   [2 0 0 0 0])
  ("util/calculate-percentage" .
   [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("msg-no-crc" .
   [2 0 0 0 0 0 2 0 0 0])
  ("0xF4" .
   [1 0 0 0])
  ("0x06" .
   [2 0 0 0])
  ("typ" .
   [2 0 0])
  ("msg-prefix" .
   [1 0 0 0 0 0 0 0 0 2])
  ("output-on" .
   [0 0 0 0 1 0 0 0 0])
  ("get-last-reply" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0])
  (":get-nominal-curr" .
   [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("get-nominal-current" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0])
  ("map-url-structure" .
   [0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0])
  ("directory-structure" .
   [0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0])
  ("build-branch" .
   [1 0 0 0 0 0 1 0 0 0 0 0])
  ("branch" .
   [1 0 0 0 0 0])
  ("next-next-dirs" .
   [0 0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("path" .
   [3 0 0 0])
  (".endsWith" .
   [0 0 0 0 0 1 0 0 0])
  ("one-level-under" .
   [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0])
  ("dir-content" .
   [1 0 0 0 0 0 0 0 0 0 0])
  ("urls" .
   [4 0 0 0])
  ("account" .
   [1 0 0 0 0 0 0])
  ("all-that-start-with" .
   [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0])
  ("start-str" .
   [2 0 0 0 0 2 0 0 0])
  ("empty?" .
   [1 0 0 0 0 0])
  ("tree" .
   [13 0 0 0])
  ("dir" .
   [7 0 0])
  ("remaining-dirs" .
   [0 0 0 0 1 1 0 1 1 2 0 0 0 0])
  ("re-matcher" .
   [0 0 0 0 1 0 0 0 0 0])
  ("build-tree" .
   [6 0 1 0 0 4 0 0 0 0])
  ("next-dirs" .
   [7 0 0 0 0 1 1 0 0])
  ("content-dirs" .
   [1 0 0 0 0 3 0 2 0 0 0 0])
  ("split-to-dirs" .
   [0 0 0 0 0 0 0 0 1 0 0 0 0])
  ("pprint" .
   [8 0 0 0 0 0])
  ("re-pattern" .
   [1 0 0 1 0 1 0 0 0 0])
  ("remove-root" .
   [1 0 0 0 0 0 0 0 0 0 0])
  ("clojure.string/replace" .
   [3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0])
  ("//?" .
   [0 0 1])
  ("clojure.string/split" .
   [3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0])
  ("doc" .
   [2 0 0])
  ("split-at" .
   [0 0 0 0 0 2 0 0])
  ("link" .
   [1 0 0 0])
  ("@unique-urls" .
   [0 0 0 0 3 0 2 5 0 0 0 0])
  ("newline" .
   [0 0 0 1 0 0 0])
  ("fetch-url" .
   [0 0 0 0 1 1 0 0 0])
  ("filter" .
   [1 0 0 0 0 0])
  ("@site-tree" .
   [0 1 0 0 0 1 0 0 0 0])
  ("site-tree" .
   [1 0 0 0 0 0 0 0 0])
  ("reset!" .
   [1 0 0 0 0 0])
  ("atom" .
   [1 0 0 0])
  ("clojure.tools.reader" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("current-root" .
   [1 0 0 0 1 1 1 1 0 0 0 0])
  ("pmap" .
   [0 0 0 1])
  ("new-links" .
   [7 0 0 0 0 0 0 0 0])
  ("new-link?" .
   [0 0 0 0 0 0 0 1 1])
  ("in?" .
   [4 0 0])
  ("unique-urls" .
   [2 0 0 3 0 0 0 0 0 0 0])
  ("->" .
   [1 0])
  ("empty" .
   [0 0 0 2 0])
  ("links" .
   [5 0 0 0 0])
  ("explore-branch" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("links-on-page" .
   [0 0 0 0 0 1 0 0 2 0 0 0 0])
  ("create-tree-of-site" .
   [0 0 0 0 0 0 0 0 0 0 1 3 0 0 1 0 0 0 0])
  ("root" .
   [4 0 0 0])
  ("root-url-en" .
   [14 0 0 0 0 0 0 0 0 3 0])
  ("build-full-paths" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  ("url-or-urn" .
   [0 0 0 3 0 0 0 0 0 0])
  ("url" .
   [7 0 0])
  ("root-url" .
   [2 0 0 1 10 1 0 1])
  ("list-links" .
   [1 0 0 0 0 0 0 0 0 0])
  ("return" .
   [1 0 0 0 0 0])
  ("send-message-to-ps" .
   [0 0 0 0 0 0 0 0 0 0 0 1 4 0 0 0 0 0])
  ("ttyACM0" .
   [1 0 0 0 0 0 0])
  ("net.cgrand.enlive-html" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("connection-open?" .
   [1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0])
  ("serial-connection" .
   [0 0 0 0 0 0 0 0 0 0 1 3 0 1 1 0 0])
  ("com-name" .
   [1 0 0 0 0 0 0 0])
  ("serial.util/list-ports" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("serial.core/open" .
   [0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("com-nr" .
   [2 0 0 0 0 0])
  ("0xFF" .
   [1 0 0 0])
  ("bit-and" .
   [1 0 0 0 0 0 1])
  ("bees" .
   [1 0 0 0])
  ("aset-byte" .
   [0 0 0 0 0 0 0 1 0])
  ("rand" .
   [0 0 0 1])
  ("for" .
   [1 0 0])
  ("second" .
   [1 0 0 0 0 0])
  ("first" .
   [4 0 0 0 0])
  ("map" .
   [2 0 0])
  ("byte-array" .
   [3 0 0 0 0 0 0 0 0 0])
  ("percentage-value" .
   [0 0 0 0 0 0 3 0 0 0 1 0 0 0 0 0])
  ("0xCCCC" .
   [1 0 0 0 0 0])
  ("Double" .
   [1 0 0 0 0 0])
  ("double" .
   [2 0 0 0 0 0])
  ("long" .
   [1 0 0 0])
  ("float" .
   [4 0 0 1 0])
  ("value" .
   [2 0 0 0 0])
  ("connection" .
   [1 0 0 0 0 0 0 0 0 0])
  ("char" .
   [1 0 0 0])
  ("str" .
   [4 0 0])
  ("nil" .
   [11 0 0])
  ("serial.util" .
   [0 0 0 0 0 0 0 1 0 0 0])
  ("serial.core" .
   [0 0 0 1 0 1 4 1 0 0 0])
  (":require" .
   [3 0 0 0 0 0 1 0])
  ("int" .
   [0 0 1])
  ("calculate-percentage" .
   [1 0 0 1 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("message" .
   [3 0 0 0 0 0 0])
  ("digest/crc16-modbus" .
   [0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("digest" .
   [0 0 0 0 0 2])
  ("biscuit.core" .
   [0 0 0 0 0 1 0 0 0 0 0 0])
  ("require" .
   [0 0 0 0 0 1 0])
  ("byte2" .
   [2 0 0 0 0])
  ("byte1" .
   [2 0 0 0 0])
  ("0x01" .
   [6 0 0 0])
  ("0x00" .
   [5 0 0 1])
  ("bit-shift-left" .
   [1 0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("bit-shift-right" .
   [0 0 0 0 0 0 0 2 0 3 0 0 0 0 0])
  ("percent-value" .
   [0 0 0 0 0 3 1 0 0 0 0 0 0])
  ("percent-value-fractal" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0])
  ("nominal-value" .
   [3 0 0 0 0 0 1 2 0 0 0 0 0])
  ("fractal-part" .
   [0 0 0 1 0 1 0 1 0 0 0 0])
  ("percent-value-integer" .
   [0 0 1 1 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("nominal-voltage" .
   [1 0 0 0 0 0 0 2 0 0 0 0 0 0 0])
  ("integer-part" .
   [1 0 0 0 0 0 0 1 1 0 0 0])
  ("hundred-percent" .
   [0 0 0 2 0 1 3 0 0 0 0 0 0 0 0])
  ("set-volt-msg" .
   [0 0 0 0 1 0 0 0 0 0 0 0])
  ("end" .
   [1 0 0])
  ("now" .
   [1 0 0])
  ("add-ten" .
   [1 0 0 0 1 1 0])
  ("doseq" .
   [0 0 0 0 1])
  ("my-map" .
   [2 0 0 0 0 0])
  ("Thread/sleep" .
   [0 0 0 0 0 0 0 1 0 0 0 0])
  ("Thread" .
   [0 0 0 0 1 0])
  ("do" .
   [17 0])
  ("multiply-by-5" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("complement" .
   [0 0 0 0 0 1 4 0 0 0])
  ("display-line" .
   [0 0 0 0 0 0 1 0 0 0 0 0])
  (":div#block" .
   [1 0 0 0 0 0 0 0 0 0])
  (":div" .
   [8 0 0 0])
  (":h1" .
   [2 0 0])
  ("binary-clock-display" .
   [0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("my-mini-component" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  (":li" .
   [2 0 0])
  ("divisible-by" .
   [0 0 0 0 1 0 0 0 0 2 0 0])
  ("simpleton" .
   [0 0 0 1 0 0 1 0 0])
  ("simple-component" .
   [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("def" .
   [22 0 0])
  ("js/Date." .
   [0 0 0 1 0 1 0 0])
  (":class" .
   [1 0 0 0 0 0])
  ("if" .
   [6 0])
  ("bit" .
   [2 0 0])
  (":refer" .
   [1 0 0 0 0 0])
  ("bit-test" .
   [0 0 0 1 0 2 0 1])
  ("column-nr" .
   [1 0 0 0 0 0 0 0 0])
  ("bit-nr" .
   [1 0 0 0 0 0])
  ("column" .
   [5 0 0 1 0 0])
  ("cell" .
   [5 0 0 0])
  ("bit-arr" .
   [0 0 0 0 0 0 1])
  ("date" .
   [3 0 0 0])
  ("quot" .
   [0 0 0 1])
  ("digit" .
   [4 0 0 0 0])
  ("clock-state" .
   [0 0 0 0 0 1 0 0 0 0 0])
  (":div#cell" .
   [1 0 0 0 0 0 0 0 0])
  ("start" .
   [8 0 0 0 0])
  ("street-address" .
   [1 0 0 0 0 2 2 0 0 0 0 0 0 0])
  ("city" .
   [1 0 0 0])
  ("state" .
   [2 0 0 0 0])
  ("first-name" .
   [4 0 0 0 0 0 0 1 0 0])
  (":street-address" .
   [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  (":city" .
   [1 0 0 0 0])
  (":state" .
   [2 0 0 0 0 0])
  ("test-address" .
   [1 0 0 0 0 0 0 0 0 0 0 0])
  ("address" .
   [1 0 0 0 0 0 0])
  ("clojure.string" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 2])
  ("clojure.string/join" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("last-name" .
   [3 0 0 0 0 0 0 0 0])
  ("partition" .
   [0 0 0 0 0 0 0 1 0])
  (":d" .
   [4 0])
  (":e" .
   [2 0])
  (":c" .
   [3 0])
  (":a" .
   [8 0])
  (":b" .
   [7 0])
  ("time-to-binary-fromat" .
   [0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("new" .
   [4 0 0])
  ("java.util.Date" .
   [0 0 0 0 0 0 0 0 0 0 0 0 2 0])
  ("subs" .
   [0 0 0 1])
  ("date-time" .
   [3 0 0 0 0 0 0 0 0])
  ("hour" .
   [1 0 0 1])
  (".getHour" .
   [1 0 0 0 0 0 0 0])
  ("split-into-digits" .
   [0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0])
  ("dt" .
   [2 0])
  ("value-pair" .
   [0 0 0 0 0 1 0 0 0 0])
  ("value-pairs" .
   [0 0 0 0 0 3 1 0 0 0 0])
  (":hour" .
   [2 0 0 0 0])
  (":minutes" .
   [5 0 0 0 0 0 0 0])
  ("time" .
   [1 0 0 0])
  ("dec-to-bin" .
   [3 0 0 0 2 0 12 4 0 0])
  ("decimal" .
   [8 0 0 0 0 1 0])
  ("swap!" .
   [0 0 2 0 0])
  ("decimal-atom" .
   [1 0 0 0 0 0 0 2 0 0 0 0])
  ("@decimal-atom" .
   [2 0 0 0 0 0 0 1 1 0 0 0 0])
  ("rep" .
   [2 0 0])
  ("bit-vals" .
   [3 0 0 0 0 0 0 0])
  ("bit-val" .
   [1 0 0 0 0 0 0])
  ("bit-pos" .
   [1 0 0 0 0 0 0])
  (">=" .
   [1 0])
  ("reverse" .
   [0 0 0 0 1 0 0])
  ("range" .
   [2 0 0 0 0])
  ("time-to-map" .
   [2 0 0 0 0 0 0 0 0 0 0])
  ("matrix" .
   [26 0 0 0 0 0])
  (":minute" .
   [1 0 0 0 0 0 0])
  (":second" .
   [2 0 0 0 0 0 0])
  (":seconds" .
   [4 0 0 0 0 0 0 0])
  (":hours" .
   [4 0 0 0 0 0])
  ("get-time" .
   [6 0 0 0 0 0 0 0])
  ("apply" .
   [2 0 0 0 0])
  (":first-digit" .
   [1 0 0 0 0 0 0 0 0 0 0 0])
  (":second-digit" .
   [3 0 0 0 0 0 0 0 0 0 0 0 0])
  ("main" .
   [1 0 0 1])
  ("first-digits" .
   [0 0 0 0 0 0 0 0 1 1 0 0])
  ("second-digit" .
   [0 0 0 0 0 0 0 1 0 0 0 0])
  ("fd" .
   [2 0])
  ("sd" .
   [1 0])
  ("second-digits" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("digits" .
   [5 0 0 0 0 0])
  ("display" .
   [2 0 0 0 0 0 0])
  ("println" .
   [2 0 0 1 2 0 0])
  ("hfd" .
   [1 0 0])
  (":as" .
   [7 0 0])
  ("cons" .
   [0 0 0 1])
  ("comp" .
   [0 0 2 0])
  ("time-vecs" .
   [1 0 0 0 0 0 0 0 0])
  ("print-vec" .
   [1 0 0 0 0 0 0 0 0])
  ("in-bin" .
   [1 0 0 0 0 0])
  ("in-binary" .
   [2 0 0 0 0 0 0 0 0])
  ("conj" .
   [4 0 0 1])
  ("turned-around" .
   [0 0 0 0 1 1 0 0 0 0 0 0 0])
  ("print-matrix" .
   [1 0 0 0 0 0 0 0 0 0 0 0])
  ("list-of-digits" .
   [0 0 0 0 0 0 0 1 0 0 1 0 0 0])
  ("row" .
   [8 0 0])
  ("doall" .
   [1 0 1 0 0])
  ("rows" .
   [5 0 0 0])
  ("nill" .
   [1 0 0 0])
  ("face" .
   [1 0 0 0])
  ("concat" .
   [0 0 0 0 1 0])
  ("flatten" .
   [0 0 0 0 0 1 0])
  ("test" .
   [1 0 0 0])
  ("serial.core/write" .
   [2 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0])
  ("connect-to-com" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("predefined-messages" .
   [0 0 0 0 0 2 6 2 1 2 1 0 0 0 0 0 0 0 0])
  (":output-on" .
   [0 0 0 0 2 4 0 1 0 0])
  ("msg" .
   [6 0 0])
  ("on?" .
   [4 0 0])
  ("send-msg" .
   [0 0 0 0 0 0 1 0])
  ("send-msg-to-ps" .
   [0 0 0 0 0 2 0 0 4 0 0 3 0 0])
  (":output-off" .
   [3 0 0 0 0 0 0 0 0 0 0])
  ("set-output" .
   [1 0 0 0 0 0 1 1 0 0])
  (":remote-on" .
   [0 0 0 0 0 1 0 0 0 0])
  ("remote-mode-on" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  (":remote-off" .
   [1 0 0 0 0 0 0 0 0 0 0])
  (":get-nominal-volt" .
   [0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0])
  ("get-nominal-volt" .
   [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0])
  ("serial.core/close" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0])
  ("serial.core/listen" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0])
  ("incoming-messages" .
   [0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0])
  (".read" .
   [2 0 0 0 0])
  ("input-stream" .
   [1 0 0 0 0 2 0 0 0 0 0 1])
  ("incoming-message-handler" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("safe-run" .
   [0 0 0 0 0 0 0 1])
  (":links" .
   [1 0 0 0 0 0])
  ("html" .
   [1 0 0 0])
  ("type" .
   [1 0 0 0])
  ("modbus-protocol.messages" .
   [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("one-hundred-percent" .
   [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("0x02" .
   [3 0 0 0])
  ("0x03" .
   [1 0 0 0])
  ("byte-arr-to-str" .
   [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("str-to-byte-arr" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("deftest" .
   [1 0 0 0 0 0 0])
  ("is" .
   [1 0])
  ("get-crc" .
   [1 0 0 0 0 0 0])
  ("in-bondora-en?" .
   [0 0 0 0 0 0 0 0 0 1 0 0 1 0])
  ("get-href" .
   [1 0 0 0 0 0 0 0])
  ("urn" .
   [2 0 0])
  (".startsWith" .
   [1 0 0 0 0 0 0 1 2 0 0])
  ("en" .
   [1 0])
  ("English" .
   [0 0 0 0 0 0 1])
  ("remove-query-string" .
   [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("collect-unique-urls" .
   [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  ("count-occurences" .
   [1 0 0 0 0 0 0 0 0 0 1 0 1 1 0 0])
  ("count-occurences-of-words" .
   [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("count" .
   [1 0 0 0 0])
  ("re-seq" .
   [1 0 0 0 0 0])
  ("txt" .
   [3 0 0])
  ("count-occ" .
   [1 0 0 0 0 0 0 1 0])
  ("loan" .
   [1 0 0 0])
  ("Invest" .
   [0 0 0 0 0 1])
  ("text" .
   [1 0 0 0])
  ("nr-of-elements" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("elements" .
   [1 0 0 0 0 0 0 0])
  ("clojure-getting-started" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("clojure-getting-started.web" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0])))
